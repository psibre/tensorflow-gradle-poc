plugins {
    id 'application'
}

mainClassName = 'PredictExampleTF'

ext {
    tensorFlowVersion = findProperty('tensorFlowVersion') ?: '1.8.0'
    gpu = Integer.parseInt(findProperty('gpu') ?: '0')
}

repositories {
    jcenter()
}

dependencies {
    compile group: 'org.tensorflow', name: 'tensorflow', version: tensorFlowVersion
}

task trainModel(type: TrainModel) {
    tensorFlowVersion = project.tensorFlowVersion
    gpu = project.gpu
    srcDir = file('python_part')
    destDir = layout.buildDirectory.dir('data')
}

run {
    dependsOn trainModel
    workingDir buildDir
}

class TrainModel extends DefaultTask {

    @Input
    Property<String> tensorFlowVersion = project.objects.property(String)

    @Input
    Property<Integer> gpu = project.objects.property(Integer)

    @InputDirectory
    final DirectoryProperty srcDir = newInputDirectory()

    @OutputDirectory
    final DirectoryProperty destDir = newOutputDirectory()

    @TaskAction
    void train() {
        def dataZipFile = project.file("$temporaryDir/data.zip")
        project.ant.zip destfile: dataZipFile, basedir: srcDir.get().asFile, compress: false
        project.ant.chmod file: dataZipFile, perm: 'ugo+rw'
        def dockerCmd = gpu.get() > 0 ? 'nvidia-docker' : 'docker'
        def dockerImageTag = tensorFlowVersion.get() + '-devel' + (gpu.get() > 0 ? '-gpu-py3' : '-py3')
        def dockerEnv = "CUDA_VISIBLE_DEVICES=${gpu.get() - 1}"
        project.exec {
            commandLine dockerCmd, 'run', '-e', dockerEnv, '-v', "$temporaryDir:/data", '-w', '/work',
                    "tensorflow/tensorflow:$dockerImageTag", '/bin/bash', '-c',
                    'unzip /data/data.zip && ' +
                            'python train.py && ' +
                            'cd data && ' +
                            'zip -0r /data/data.zip *'
        }
        project.copy {
            from project.zipTree(dataZipFile)
            from "$project.rootDir/data"
            into destDir
        }
    }
}
