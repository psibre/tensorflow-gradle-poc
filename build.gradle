plugins {
    id 'application'
}

mainClassName = 'PredictExampleTF'

ext {
    tensorFlowVersion = '1.8.0'
}

repositories {
    jcenter()
}

dependencies {
    compile group: 'org.tensorflow', name: 'tensorflow', version: tensorFlowVersion
}

if (hasProperty('gpu')) {
    configurations.all {
        resolutionStrategy {
            dependencySubstitution {
                substitute module('org.tensorflow:libtensorflow_jni') with module("org.tensorflow:libtensorflow_jni_gpu:$tensorFlowVersion")
            }
        }
    }
}

task trainModel(type: TrainModel) {
    tensorFlowVersion = project.tensorFlowVersion
    docker = 'docker'
    srcDir = file('python_part')
    destDir = layout.buildDirectory.dir('data')
}

run {
    dependsOn trainModel
    workingDir buildDir
}

class TrainModel extends DefaultTask {

    @Input
    Property<String> tensorFlowVersion = project.objects.property(String)

    @Input
    Property<String> docker = project.objects.property(String)

    @InputDirectory
    final DirectoryProperty srcDir = newInputDirectory()

    @OutputDirectory
    final DirectoryProperty destDir = newOutputDirectory()

    @TaskAction
    void train() {
        project.copy {
            from srcDir
            into temporaryDir
        }
        project.exec {
            commandLine docker.get(), 'run', '-v', "$temporaryDir:/work", '-w', '/work',
                    "tensorflow/tensorflow:${this.tensorFlowVersion.get()}-devel-py3", 'python', 'train.py'
            workingDir temporaryDir
        }
        project.copy {
            from "$temporaryDir/data"
            from "$project.rootDir/data"
            into destDir
        }
    }
}
